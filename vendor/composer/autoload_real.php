<?php

// autoload_real.php @generated by Composer

<<<<<<< HEAD
class ComposerAutoloaderInit01f3a111144c97e8e828ef319f2a9818
=======
class ComposerAutoloaderInit8bd0fecd1af0498e940d07d75fd26bfc
>>>>>>> origin/master
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

<<<<<<< HEAD
        spl_autoload_register(array('ComposerAutoloaderInit01f3a111144c97e8e828ef319f2a9818', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit01f3a111144c97e8e828ef319f2a9818', 'loadClassLoader'));
=======
        spl_autoload_register(array('ComposerAutoloaderInit8bd0fecd1af0498e940d07d75fd26bfc', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit8bd0fecd1af0498e940d07d75fd26bfc', 'loadClassLoader'));
>>>>>>> origin/master

        $includePaths = require __DIR__ . '/include_paths.php';
        array_push($includePaths, get_include_path());
        set_include_path(join(PATH_SEPARATOR, $includePaths));

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        $map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        $includeFiles = require __DIR__ . '/autoload_files.php';
        foreach ($includeFiles as $file) {
<<<<<<< HEAD
            composerRequire01f3a111144c97e8e828ef319f2a9818($file);
=======
            composerRequire8bd0fecd1af0498e940d07d75fd26bfc($file);
>>>>>>> origin/master
        }

        return $loader;
    }
}

<<<<<<< HEAD
function composerRequire01f3a111144c97e8e828ef319f2a9818($file)
=======
function composerRequire8bd0fecd1af0498e940d07d75fd26bfc($file)
>>>>>>> origin/master
{
    require $file;
}
